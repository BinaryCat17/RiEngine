#include "Format.hpp"
#include <magic_enum.hpp>

namespace rise {
    Size formatSize(Format format) {
        switch (format) {
            case Format::Undefined:
                return Size(0);
            case Format::R8Unorm:
                return Size(1);
            case Format::R8Snorm:
                return Size(1);
            case Format::R8Uscaled:
                return Size(1);
            case Format::R8Sscaled:
                return Size(1);
            case Format::R8Uint:
                return Size(1);
            case Format::R8Sint:
                return Size(1);
            case Format::R8Srgb:
                return Size(1);
            case Format::R8G8Unorm:
                return Size(2);
            case Format::R8G8Snorm:
                return Size(2);
            case Format::R8G8Uscaled:
                return Size(2);
            case Format::R8G8Sscaled:
                return Size(2);
            case Format::R8G8Uint:
                return Size(2);
            case Format::R8G8Sint:
                return Size(2);
            case Format::R8G8Srgb:
                return Size(2);
            case Format::R8G8B8Unorm:
                return Size(3);
            case Format::R8G8B8Snorm:
                return Size(3);
            case Format::R8G8B8Uscaled:
                return Size(3);
            case Format::R8G8B8Sscaled:
                return Size(3);
            case Format::R8G8B8Uint:
                return Size(3);
            case Format::R8G8B8Sint:
                return Size(3);
            case Format::R8G8B8Srgb:
                return Size(3);
            case Format::B8G8R8Unorm:
                return Size(3);
            case Format::B8G8R8Snorm:
                return Size(3);
            case Format::B8G8R8Uscaled:
                return Size(3);
            case Format::B8G8R8Sscaled:
                return Size(3);
            case Format::B8G8R8Uint:
                return Size(3);
            case Format::B8G8R8Sint:
                return Size(3);
            case Format::B8G8R8Srgb:
                return Size(3);
            case Format::R8G8B8A8Unorm:
                return Size(4);
            case Format::R8G8B8A8Snorm:
                return Size(4);
            case Format::R8G8B8A8Uscaled:
                return Size(4);
            case Format::R8G8B8A8Sscaled:
                return Size(4);
            case Format::R8G8B8A8Uint:
                return Size(4);
            case Format::R8G8B8A8Sint:
                return Size(4);
            case Format::R8G8B8A8Srgb:
                return Size(4);
            case Format::B8G8R8A8Unorm:
                return Size(4);
            case Format::B8G8R8A8Snorm:
                return Size(4);
            case Format::B8G8R8A8Uscaled:
                return Size(4);
            case Format::B8G8R8A8Sscaled:
                return Size(4);
            case Format::B8G8R8A8Uint:
                return Size(4);
            case Format::B8G8R8A8Sint:
                return Size(4);
            case Format::B8G8R8A8Srgb:
                return Size(4);
            case Format::R16Unorm:
                return Size(2);
            case Format::R16Snorm:
                return Size(2);
            case Format::R16Uscaled:
                return Size(2);
            case Format::R16Sscaled:
                return Size(2);
            case Format::R16Uint:
                return Size(2);
            case Format::R16Sint:
                return Size(2);
            case Format::R16Sfloat:
                return Size(2);
            case Format::R16G16Unorm:
                return Size(4);
            case Format::R16G16Snorm:
                return Size(4);
            case Format::R16G16Uscaled:
                return Size(4);
            case Format::R16G16Sscaled:
                return Size(4);
            case Format::R16G16Uint:
                return Size(4);
            case Format::R16G16Sint:
                return Size(4);
            case Format::R16G16Sfloat:
                return Size(4);
            case Format::R16G16B16Unorm:
                return Size(6);
            case Format::R16G16B16Snorm:
                return Size(6);
            case Format::R16G16B16Uscaled:
                return Size(6);
            case Format::R16G16B16Sscaled:
                return Size(6);
            case Format::R16G16B16Uint:
                return Size(6);
            case Format::R16G16B16Sint:
                return Size(6);
            case Format::R16G16B16Sfloat:
                return Size(6);
            case Format::R16G16B16A16Unorm:
                return Size(8);
            case Format::R16G16B16A16Snorm:
                return Size(8);
            case Format::R16G16B16A16Uscaled:
                return Size(8);
            case Format::R16G16B16A16Sscaled:
                return Size(8);
            case Format::R16G16B16A16Uint:
                return Size(8);
            case Format::R16G16B16A16Sint:
                return Size(8);
            case Format::R16G16B16A16Sfloat:
                return Size(8);
            case Format::R32Uint:
                return Size(4);
            case Format::R32Sint:
                return Size(4);
            case Format::R32Sfloat:
                return Size(4);
            case Format::R32G32Uint:
                return Size(8);
            case Format::R32G32Sint:
                return Size(8);
            case Format::R32G32Sfloat:
                return Size(8);
            case Format::R32G32B32Uint:
                return Size(12);
            case Format::R32G32B32Sint:
                return Size(12);
            case Format::R32G32B32Sfloat:
                return Size(12);
            case Format::R32G32B32A32Uint:
                return Size(16);
            case Format::R32G32B32A32Sint:
                return Size(16);
            case Format::R32G32B32A32Sfloat:
                return Size(16);
            case Format::R64Uint:
                return Size(8);
            case Format::R64Sint:
                return Size(8);
            case Format::R64Sfloat:
                return Size(8);
            case Format::R64G64Uint:
                return Size(16);
            case Format::R64G64Sint:
                return Size(16);
            case Format::R64G64Sfloat:
                return Size(16);
            case Format::R64G64B64Uint:
                return Size(24);
            case Format::R64G64B64Sint:
                return Size(24);
            case Format::R64G64B64Sfloat:
                return Size(24);
            case Format::R64G64B64A64Uint:
                return Size(32);
            case Format::R64G64B64A64Sint:
                return Size(32);
            case Format::R64G64B64A64Sfloat:
                return Size(32);
            case Format::D16Unorm:
                return Size(2);
            case Format::D32Sfloat:
                return Size(4);
            case Format::S8Uint:
                return Size(1);
            case Format::D16UnormS8Uint:
                return Size(3);
            case Format::D24UnormS8Uint:
                return Size(4);
            case Format::D32SfloatS8Uint:
                return Size(5);
        }
        return Size(0);
    }
}